{"version":3,"file":"hello_near.js","sources":["../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-contract.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/collections/unordered-set.js","../src/internal.ts","../src/sale.ts","../src/sale_views.ts","../src/nft_callbacks.ts","../src/index.ts"],"sourcesContent":["export function call(target, key, descriptor) {\n}\nexport function view(target, key, descriptor) {\n}\nexport function NearBindgen(target) {\n    return class extends target {\n        static _init() {\n            // @ts-ignore\n            let args = target.deserializeArgs();\n            let ret = new target(args);\n            // @ts-ignore\n            ret.init();\n            // @ts-ignore\n            ret.serialize();\n            return ret;\n        }\n        static _get() {\n            let ret = Object.create(target.prototype);\n            return ret;\n        }\n    };\n}\n","const U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\nexport function log(...params) {\n    env.log(`${params\n        .map(x => x === undefined ? 'undefined' : x) // Stringify undefined\n        .map(x => typeof (x) === 'object' ? JSON.stringify(x) : x) // Convert Objects to strings\n        .join(' ')}` // Convert to string\n    );\n}\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\nexport function blockIndex() {\n    return env.block_index();\n}\nexport function blockHeight() {\n    return blockIndex();\n}\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\nexport function epochHeight() {\n    return env.epoch_height();\n}\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\nexport function usedGas() {\n    return env.used_gas();\n}\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    let ret = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (ret === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\nexport function panic(msg) {\n    if (msg !== undefined) {\n        env.panic(msg);\n    }\n    else {\n        env.panic();\n    }\n}\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function storageRead(key) {\n    let ret = env.storage_read(key, 0);\n    if (ret === 1n) {\n        return env.read_register(0);\n    }\n    else {\n        return null;\n    }\n}\nexport function storageHasKey(key) {\n    let ret = env.storage_has_key(key);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    let ret = env.alt_bn128_pairing_check(value);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function jsvmAccountId() {\n    env.jsvm_account_id(0);\n    return env.read_register(0);\n}\nexport function jsvmJsContractName() {\n    env.jsvm_js_contract_name(0);\n    return env.read_register(0);\n}\nexport function jsvmMethodName() {\n    env.jsvm_method_name(0);\n    return env.read_register(0);\n}\nexport function jsvmArgs() {\n    env.jsvm_args(0);\n    return env.read_register(0);\n}\nexport function jsvmStorageWrite(key, value) {\n    let exist = env.jsvm_storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmStorageRead(key) {\n    let exist = env.jsvm_storage_read(key, 0);\n    if (exist === 1n) {\n        return env.read_register(0);\n    }\n    return null;\n}\nexport function jsvmStorageRemove(key) {\n    let exist = env.jsvm_storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmStorageHasKey(key) {\n    let exist = env.jsvm_storage_has_key(key);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmCallRaw(contractName, method, args) {\n    env.jsvm_call(contractName, method, JSON.stringify(args), 0);\n    return env.read_register(0);\n}\nexport function jsvmCall(contractName, method, args) {\n    let ret = jsvmCallRaw(contractName, method, args);\n    if (ret === null) {\n        return ret;\n    }\n    return JSON.parse(ret);\n}\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\nexport function jsvmValueReturn(value) {\n    env.jsvm_value_return(value);\n}\n// Standalone only APIs\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\nexport function storageUsage() {\n    return env.storage_usage();\n}\nexport function accountBalance() {\n    return env.account_balance();\n}\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\nexport function valueReturn(value) {\n    env.value_return(value);\n}\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\nexport function promiseAnd(...promiseIndex) {\n    return env.promise_and(...promiseIndex);\n}\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\nexport function promiseResult(resultIdx) {\n    let status = env.promise_result(resultIdx, 0);\n    if (status == PromiseResult.Successful) {\n        return env.read_register(0);\n    }\n    else if (status == PromiseResult.Failed ||\n        status == PromiseResult.NotReady) {\n        return status;\n    }\n    else {\n        panic(`Unexpected return code: ${status}`);\n    }\n}\nexport function promiseReturn(promiseIdx) {\n    env.promise_return(promiseIdx);\n}\nexport function storageWrite(key, value) {\n    let exist = env.storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageRemove(key) {\n    let exist = env.storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n","import * as near from \"./api\";\nexport class NearContract {\n    deserialize() {\n        const rawState = near.storageRead(\"STATE\");\n        if (rawState) {\n            const state = JSON.parse(rawState);\n            // reconstruction of the contract class object from plain object\n            let c = this.default();\n            Object.assign(this, state);\n            for (const item in c) {\n                if (c[item].constructor?.deserialize !== undefined) {\n                    this[item] = c[item].constructor.deserialize(this[item]);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Contract state is empty\");\n        }\n    }\n    serialize() {\n        near.storageWrite(\"STATE\", JSON.stringify(this));\n    }\n    static deserializeArgs() {\n        let args = near.input();\n        return JSON.parse(args || \"{}\");\n    }\n    static serializeReturn(ret) {\n        return JSON.stringify(ret);\n    }\n    init() { }\n}\n","import * as near from '../api';\nexport class LookupMap {\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    containsKey(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        return near.storageHasKey(storageKey);\n    }\n    get(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let raw = near.storageRead(storageKey);\n        if (raw !== null) {\n            return JSON.parse(raw);\n        }\n        return null;\n    }\n    remove(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        if (near.storageRemove(storageKey)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    set(key, value) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let storageValue = JSON.stringify(value);\n        if (near.storageWrite(storageKey, storageValue)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    extend(objects) {\n        for (let kv of objects) {\n            this.set(kv[0], kv[1]);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","export function u8ArrayToBytes(array) {\n    let ret = \"\";\n    for (let e of array) {\n        ret += String.fromCharCode(e);\n    }\n    return ret;\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    let ret = new Uint8Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        ret[i] = bytes.charCodeAt(i);\n    }\n    return ret;\n}\nexport function bytes(strOrU8Array) {\n    if (typeof strOrU8Array == \"string\") {\n        return checkStringIsBytes(strOrU8Array);\n    }\n    else if (strOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(strOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(str) {\n    for (let i = 0; i < str.length; i++) {\n        if (str.charCodeAt(i) > 255) {\n            throw new Error(`string ${str} at index ${i}: ${str[i]} is not a valid byte`);\n        }\n    }\n    return str;\n}\nexport function assert(b, str) {\n    if (b) {\n        return;\n    }\n    else {\n        throw Error(\"assertion failed: \" + str);\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes } from \"../utils\";\nconst ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nfunction indexToKey(prefix, index) {\n    let data = new Uint32Array([index]);\n    let array = new Uint8Array(data.buffer);\n    let key = u8ArrayToBytes(array);\n    return prefix + key;\n}\n/// An iterable implementation of vector that stores its content on the trie.\n/// Uses the following map: index -> element\nexport class Vector {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n    }\n    len() {\n        return this.length;\n    }\n    isEmpty() {\n        return this.length == 0;\n    }\n    get(index) {\n        if (index >= this.length) {\n            return null;\n        }\n        let storageKey = indexToKey(this.prefix, index);\n        return JSON.parse(near.storageRead(storageKey));\n    }\n    /// Removes an element from the vector and returns it in serialized form.\n    /// The removed element is replaced by the last element of the vector.\n    /// Does not preserve ordering, but is `O(1)`.\n    swapRemove(index) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else if (index + 1 == this.length) {\n            return this.pop();\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            let last = this.pop();\n            if (near.storageWrite(key, JSON.stringify(last))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    push(element) {\n        let key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWrite(key, JSON.stringify(element));\n    }\n    pop() {\n        if (this.isEmpty()) {\n            return null;\n        }\n        else {\n            let lastIndex = this.length - 1;\n            let lastKey = indexToKey(this.prefix, lastIndex);\n            this.length -= 1;\n            if (near.storageRemove(lastKey)) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    replace(index, element) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            if (near.storageWrite(key, JSON.stringify(element))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    clear() {\n        for (let i = 0; i < this.length; i++) {\n            let key = indexToKey(this.prefix, i);\n            near.storageRemove(key);\n        }\n        this.length = 0;\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let vector = new Vector(data.prefix);\n        vector.length = data.length;\n        return vector;\n    }\n}\nexport class VectorIterator {\n    constructor(vector) {\n        this.current = 0;\n        this.vector = vector;\n    }\n    next() {\n        if (this.current < this.vector.len()) {\n            let value = this.vector.get(this.current);\n            this.current += 1;\n            return { value, done: false };\n        }\n        return { value: null, done: true };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedMap {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n        this.keyIndexPrefix = prefix + \"i\";\n        let indexKey = prefix + \"k\";\n        let indexValue = prefix + \"v\";\n        this.keys = new Vector(indexKey);\n        this.values = new Vector(indexValue);\n    }\n    len() {\n        let keysLen = this.keys.len();\n        let valuesLen = this.values.len();\n        if (keysLen != valuesLen) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return keysLen;\n    }\n    isEmpty() {\n        let keysIsEmpty = this.keys.isEmpty();\n        let valuesIsEmpty = this.values.isEmpty();\n        if (keysIsEmpty != valuesIsEmpty) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return keysIsEmpty;\n    }\n    serializeIndex(index) {\n        let data = new Uint32Array([index]);\n        let array = new Uint8Array(data.buffer);\n        return u8ArrayToBytes(array);\n    }\n    deserializeIndex(rawIndex) {\n        let array = bytesToU8Array(rawIndex);\n        let data = new Uint32Array(array.buffer);\n        return data[0];\n    }\n    getIndexRaw(key) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        return indexRaw;\n    }\n    get(key) {\n        let indexRaw = this.getIndexRaw(key);\n        if (indexRaw) {\n            let index = this.deserializeIndex(indexRaw);\n            let value = this.values.get(index);\n            if (value) {\n                return value;\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n        return null;\n    }\n    set(key, value) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            let index = this.deserializeIndex(indexRaw);\n            return this.values.replace(index, value);\n        }\n        else {\n            let nextIndex = this.len();\n            let nextIndexRaw = this.serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.keys.push(key);\n            this.values.push(value);\n            return null;\n        }\n    }\n    remove(key) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.len() == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastKey = this.keys.get(this.len() - 1);\n                if (!lastKey) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastKey != key) {\n                    let lastLookupKey = this.keyIndexPrefix + JSON.stringify(lastKey);\n                    near.storageWrite(lastLookupKey, indexRaw);\n                }\n            }\n            let index = this.deserializeIndex(indexRaw);\n            this.keys.swapRemove(index);\n            return this.values.swapRemove(index);\n        }\n        return null;\n    }\n    clear() {\n        for (let key of this.keys) {\n            let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n            near.storageRemove(indexLookup);\n        }\n        this.keys.clear();\n        this.values.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    extend(kvs) {\n        for (let [k, v] of kvs) {\n            this.set(k, v);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let map = new UnorderedMap(data.prefix);\n        // reconstruct UnorderedMap\n        map.length = data.length;\n        // reconstruct keys Vector\n        map.keys = new Vector(data.prefix + \"k\");\n        map.keys.length = data.keys.length;\n        // reconstruct values Vector\n        map.values = new Vector(data.prefix + \"v\");\n        map.values.length = data.values.length;\n        return map;\n    }\n}\nclass UnorderedMapIterator {\n    constructor(unorderedMap) {\n        this.keys = new VectorIterator(unorderedMap.keys);\n        this.values = new VectorIterator(unorderedMap.values);\n    }\n    next() {\n        let key = this.keys.next();\n        let value = this.values.next();\n        if (key.done != value.done) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return { value: [key.value, value.value], done: key.done };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedSet {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n        this.elementIndexPrefix = prefix + \"i\";\n        let elementsPrefix = prefix + \"e\";\n        this.elements = new Vector(elementsPrefix);\n    }\n    len() {\n        return this.elements.len();\n    }\n    isEmpty() {\n        return this.elements.isEmpty();\n    }\n    serializeIndex(index) {\n        let data = new Uint32Array([index]);\n        let array = new Uint8Array(data.buffer);\n        return u8ArrayToBytes(array);\n    }\n    deserializeIndex(rawIndex) {\n        let array = bytesToU8Array(rawIndex);\n        let data = new Uint32Array(array.buffer);\n        return data[0];\n    }\n    contains(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        return near.storageHasKey(indexLookup);\n    }\n    set(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        if (near.storageRead(indexLookup)) {\n            return false;\n        }\n        else {\n            let nextIndex = this.len();\n            let nextIndexRaw = this.serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.elements.push(element);\n            return true;\n        }\n    }\n    remove(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.len() == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastElement = this.elements.get(this.len() - 1);\n                if (!lastElement) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastElement != element) {\n                    let lastLookupElement = this.elementIndexPrefix + JSON.stringify(lastElement);\n                    near.storageWrite(lastLookupElement, indexRaw);\n                }\n            }\n            let index = this.deserializeIndex(indexRaw);\n            this.elements.swapRemove(index);\n            return true;\n        }\n        return false;\n    }\n    clear() {\n        for (let element of this.elements) {\n            let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n            near.storageRemove(indexLookup);\n        }\n        this.elements.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return this.elements[Symbol.iterator]();\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.set(element);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let set = new UnorderedSet(data.prefix);\n        // reconstruct UnorderedSet\n        set.length = data.length;\n        // reconstruct Vector\n        let elementsPrefix = data.prefix + \"e\";\n        set.elements = new Vector(elementsPrefix);\n        set.elements.length = data.elements.length;\n        return set;\n    }\n}\n","import { assert, near, UnorderedSet } from \"near-sdk-js\";\nimport { Contract, DELIMETER } from \".\";\nimport { Sale } from \"./sale\";\n\nexport function restoreOwners(collection) {\n    if (collection == null) {\n        return null;\n    }\n    return UnorderedSet.deserialize(collection as UnorderedSet);\n}\n\nexport function assertOneYocto() {\n    assert(near.attachedDeposit().toString() === \"1\", \"Requires attached deposit of exactly 1 yoctoNEAR\");\n}\n\nexport function internallyRemoveSale(contract: Contract, nftContractId: string, tokenId: string): Sale {\n    let contractAndTokenId = `${nftContractId}${DELIMETER}${tokenId}`;\n    let sale = contract.sales.remove(contractAndTokenId) as Sale;\n    if (sale == null) {\n        near.panic(\"no sale\");\n    }\n    let byOwnerId = restoreOwners(contract.byOwnerId.get(sale.owner_id));\n    if (byOwnerId == null) {\n        near.panic(\"no sales by owner\");\n    }\n    byOwnerId.remove(contractAndTokenId);\n\n    if (byOwnerId.isEmpty()) {\n        contract.byOwnerId.remove(sale.owner_id);\n    } else {\n        contract.byOwnerId.set(sale.owner_id, byOwnerId);\n    }\n\n    let byNftContractId = restoreOwners(contract.byNftContractId.get(nftContractId));\n    if (byNftContractId == null) {\n        near.panic(\"no sales by nft contract\");\n    }\n\n    byNftContractId.remove(tokenId);\n    if (byNftContractId.isEmpty()) {\n        contract.byNftContractId.remove(nftContractId);\n    } else {\n        contract.byNftContractId.set(nftContractId, byNftContractId);\n    }\n\n    return sale;\n}","import { assert, bytes, near } from \"near-sdk-js\";\nimport { Contract, DELIMETER } from \".\";\nimport { assertOneYocto, internallyRemoveSale } from \"./internal\";\n\nconst GAS_FOR_NFT_TRANSFER = 15_000_000_000_000;\n\nexport class Sale {\n    owner_id: string;\n    approval_id: number;\n    nft_contract_id: string;\n    token_id: String;\n    sale_conditions: string;\n\n    constructor(\n        {\n            ownerId,\n            approvalId,\n            nftContractId,\n            tokenId,\n            saleConditions,\n        }: {\n            ownerId: string,\n            approvalId: number,\n            nftContractId: string,\n            tokenId: String,\n            saleConditions: string,\n        }) {\n        this.owner_id = ownerId;\n        this.approval_id = approvalId;\n        this.nft_contract_id = nftContractId;\n        this.token_id = tokenId;\n        this.sale_conditions = saleConditions;\n    }\n}\n\nexport function internalRemoveSale({\n    contract,\n    nftContractId,\n    tokenId\n}: {\n    contract: Contract,\n    nftContractId: string,\n    tokenId: string\n}) {\n    assertOneYocto();\n\n    let sale = internallyRemoveSale(contract, nftContractId, tokenId);\n\n    let ownerId = near.predecessorAccountId();\n\n    assert(ownerId == sale.owner_id, \"only the owner of the sale can remove it\");\n}\n\nexport function internalUpdatePrice({\n    contract,\n    nftContractId,\n    tokenId,\n    price\n}: {\n    contract: Contract,\n    nftContractId: string,\n    tokenId: string,\n    price: string\n}) {\n    assertOneYocto();\n\n    let contractAndTokenId = `${nftContractId}${DELIMETER}${tokenId}`;\n\n    let sale = contract.sales.get(contractAndTokenId) as Sale;\n    if (sale == null) {\n        near.panic(\"no sale\");\n    }\n\n    assert(near.predecessorAccountId() == sale.owner_id, \"only the owner of the sale can update it\");\n    sale.sale_conditions = price;\n    contract.sales.set(contractAndTokenId, sale);\n}\n\nexport function internalOffer({\n    contract,\n    nftContractId,\n    tokenId\n}: {\n    contract: Contract,\n    nftContractId: string,\n    tokenId: string\n}) {\n    let deposit = near.attachedDeposit().valueOf();\n    assert(deposit > 0, \"deposit must be greater than 0\");\n\n    let contractAndTokenId = `${nftContractId}${DELIMETER}${tokenId}`;\n    let sale = contract.sales.get(contractAndTokenId) as Sale;\n    if (sale == null) {\n        near.panic(\"no sale\");\n    }\n\n    let buyerId = near.predecessorAccountId();\n    assert(buyerId != sale.owner_id, \"you can't offer on your own sale\");\n\n    let price = BigInt(sale.sale_conditions);\n    assert(deposit >= price, \"deposit must be greater than or equal to price\");\n\n    processPurchase({ contract, nftContractId, tokenId, price: deposit.toString(), buyerId });\n}\n\nexport function processPurchase({\n    contract,\n    nftContractId,\n    tokenId,\n    price,\n    buyerId\n}: {\n    contract: Contract,\n    nftContractId: string,\n    tokenId: string,\n    price: string,\n    buyerId: string\n}) {\n    let sale = internallyRemoveSale(contract, nftContractId, tokenId);\n\n    const promise = near.promiseBatchCreate(nftContractId);\n    near.promiseBatchActionFunctionCall(\n        promise,\n        \"nft_transfer_payout\",\n        bytes(JSON.stringify({\n            receiver_id: buyerId,\n            token_id: tokenId,\n            approval_id: sale.approval_id,\n            memo: \"payout from market\",\n            balance: price,\n            max_len_payout: 10\n        })),\n        1,\n        GAS_FOR_NFT_TRANSFER\n    );\n\n    near.promiseThen(\n        promise,\n        near.currentAccountId(),\n        \"resolve_purchase\",\n        bytes(JSON.stringify({\n            buyer_id: buyerId,\n            price: price\n        })),\n        0,\n        0\n    );\n    return near.promiseReturn(promise);\n}\n\nexport function internalResolvePurchase({\n    buyerId,\n    price\n}: {\n    buyerId: string,\n    price: string\n}) {\n    assert(near.currentAccountId() === near.predecessorAccountId(), \"Only the contract itself can call this method\");\n\n    let result = near.promiseResult(0);\n    let payout = null;\n    if (typeof result === 'string') {\n\n        try {\n            let payoutOption = JSON.parse(result);\n            if (Object.keys(payoutOption.payout).length > 10 || Object.keys(payoutOption.payout).length < 1) {\n                throw \"Cannot have more than 10 royalties\";\n            } else {\n                let remainder = BigInt(price);\n                Object.entries(payoutOption.payout).forEach(([key, value], index) => {\n                    remainder = remainder - BigInt(value as string);\n                });\n\n                if (remainder == BigInt(0) || remainder == BigInt(1)) {\n                    payout = payoutOption.payout;\n                } else {\n                    throw \"Payout is not correct\";\n                }\n            }\n        } catch (e) {\n            near.log(`error parsing payout object ${result}`);\n            payout = null;\n        }\n    }\n\n    if (payout == null) {\n        const promise = near.promiseBatchCreate(buyerId);\n        near.promiseBatchActionTransfer(promise, BigInt(price))\n        return price;\n    }\n    for (let [key, value] of Object.entries(payout)) {\n        const promise = near.promiseBatchCreate(key);\n        near.promiseBatchActionTransfer(promise, BigInt(value as string))\n    }\n\n    return price;\n}\n","import { Contract } from \".\";\nimport { restoreOwners } from \"./internal\";\nimport { Sale } from \"./sale\";\n\nexport function internalSupplySales({\n    contract\n}: {\n    contract: Contract\n}): string {\n    return contract.sales.len().toString();\n}\n\nexport function internalSupplyByOwnerId({\n    contract,\n    accountId\n}: {\n    contract: Contract,\n    accountId: string\n}): string {\n    let byOwnerId = restoreOwners(contract.byOwnerId.get(accountId));\n    if (byOwnerId == null) {\n        return \"0\"\n    }\n\n    return byOwnerId.len().toString();\n}\n\nexport function internalSalesByOwnerId({\n    contract,\n    accountId,\n    fromIndex,\n    limit\n}: {\n    contract: Contract,\n    accountId: string,\n    fromIndex?: string,\n    limit?: number\n}): Sale[] {\n    let tokenSet = restoreOwners(contract.byOwnerId.get(accountId));\n\n    if (tokenSet == null) {\n        return [];\n    }\n\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    let max = limit ? limit : 50;\n\n    let keys = tokenSet.toArray();\n    let sales: Sale[] = []\n    for (let i = start; i < max; i++) {\n        if (i >= keys.length) {\n            break;\n        }\n        let sale = contract.sales.get(keys[i]) as Sale;\n        if (sale != null) {\n            sales.push(sale);\n        }\n    }\n    return sales;\n}\n\nexport function internalSupplyByNftContractId({\n    contract,\n    nftContractId\n}: {\n    contract: Contract,\n    nftContractId: string\n}): string {\n    let byNftContractId = restoreOwners(contract.byNftContractId.get(nftContractId));\n    if (byNftContractId == null) {\n        return \"0\"\n    }\n\n    return byNftContractId.len().toString();\n}\n\nexport function internalSalesByNftContractId({\n    contract,\n    accountId,\n    fromIndex,\n    limit\n}: {\n    contract: Contract,\n    accountId: string,\n    fromIndex?: string,\n    limit?: number\n}): Sale[] {\n    let tokenSet = restoreOwners(contract.byNftContractId.get(accountId));\n\n    if (tokenSet == null) {\n        return [];\n    }\n\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    let max = limit ? limit : 50;\n\n    let keys = tokenSet.toArray();\n    let sales: Sale[] = []\n    for (let i = start; i < max; i++) {\n        if (i >= keys.length) {\n            break;\n        }\n        let sale = contract.sales.get(keys[i]) as Sale;\n        if (sale != null) {\n            sales.push(sale);\n        }\n    }\n    return sales;\n}\n\nexport function internalGetSale({\n    contract,\n    nftContractToken,\n}: {\n    contract: Contract,\n    nftContractToken: string\n}): Sale {\n    return contract.sales.get(nftContractToken) as Sale;\n}","import { assert, near, UnorderedSet } from \"near-sdk-js\";\nimport { Contract, DELIMETER } from \".\";\nimport { Sale } from \"./sale\";\nimport { internalSupplyByOwnerId } from \"./sale_views\";\n\nexport function internalNftOnApprove({\n    contract,\n    tokenId,\n    ownerId,\n    approvalId,\n    msg\n}: {\n    contract: Contract,\n    tokenId: string,\n    ownerId: string,\n    approvalId: number,\n    msg: string\n}) {\n    let contractId = near.predecessorAccountId();\n    let signerId = near.signerAccountId();\n\n    assert(signerId != contractId, \"this function can only be called via a cross-contract call\");\n    assert(ownerId == signerId, \"only the owner of the token can approve it\");\n\n    let storageAmount = contract.storage_minimum_balance();\n    let ownerPaidStorage = contract.storageDeposits.get(signerId) || BigInt(0);\n    let signerStorageRequired = (BigInt(internalSupplyByOwnerId({ contract, accountId: signerId })) + BigInt(1)) * BigInt(storageAmount);\n\n    assert(ownerPaidStorage >= signerStorageRequired, \"the owner does not have enough storage to approve this token\");\n\n    let saleConditions = JSON.parse(msg);\n    if (!saleConditions.hasOwnProperty('sale_conditions') || Object.keys(saleConditions).length != 1) {\n        near.panic(\"invalid sale conditions\");\n    }\n    let contractAndTokenId = `${contractId}${DELIMETER}${tokenId}`;\n\n    contract.sales.set(contractAndTokenId, new Sale({\n        ownerId: ownerId,\n        approvalId: approvalId,\n        nftContractId: contractId,\n        tokenId: tokenId,\n        saleConditions: saleConditions.sale_conditions\n    }));\n\n    let byOwnerId = contract.byOwnerId.get(ownerId) as UnorderedSet || new UnorderedSet(ownerId);\n    byOwnerId.set(contractAndTokenId);\n    contract.byOwnerId.set(ownerId, byOwnerId);\n\n    let byNftContractId = contract.byNftContractId.get(contractId) as UnorderedSet || new UnorderedSet(contractId);\n    byNftContractId.set(tokenId);\n    contract.byNftContractId.set(contractId, byNftContractId);\n\n}","import { NearContract, NearBindgen, near, call, view, LookupMap, UnorderedMap, Vector, UnorderedSet, assert } from 'near-sdk-js'\nimport { assertOneYocto, restoreOwners } from './internal';\nimport { internalNftOnApprove } from './nft_callbacks';\nimport { internalOffer, internalRemoveSale, internalResolvePurchase, internalUpdatePrice, Sale } from './sale';\nimport { internalGetSale, internalSalesByNftContractId, internalSalesByOwnerId, internalSupplyByNftContractId, internalSupplyByOwnerId, internalSupplySales } from './sale_views';\n\nexport const NFT_METADATA_SPEC = \"nft-1.0.0\";\n\nexport const NFT_STANDARD_NAME = \"nep171\";\n\nexport const STORAGE_PER_SALE: bigint = BigInt(1000) * near.storageByteCost().valueOf();\n\nexport const DELIMETER = \".\";\n\n@NearBindgen\nexport class Contract extends NearContract {\n  ownerId: string;\n  sales: UnorderedMap;\n  byOwnerId: LookupMap;\n  byNftContractId: LookupMap;\n  storageDeposits: LookupMap;\n\n  constructor({ owner_id }: { owner_id: string }) {\n    super()\n    this.ownerId = owner_id;\n    this.sales = new UnorderedMap(\"sales\");\n    this.byOwnerId = new LookupMap(\"byOwnerId\");\n    this.byNftContractId = new LookupMap(\"byNftContractId\");\n    this.storageDeposits = new LookupMap(\"storageDeposits\");\n  }\n\n  default() {\n    return new Contract({ owner_id: near.predecessorAccountId() })\n  }\n\n  @call\n  storage_deposit({ account_id }: { account_id?: string }) {\n    let storageAccountId = account_id || near.predecessorAccountId();\n    let deposit = near.attachedDeposit().valueOf();\n\n    assert(deposit >= STORAGE_PER_SALE, `Requires minimum deposit of ${STORAGE_PER_SALE}`);\n\n    let balance: string = this.storageDeposits.get(storageAccountId) as string || \"0\";\n    let newBalance = BigInt(balance) + deposit;\n    this.storageDeposits.set(storageAccountId, newBalance.toString());\n  }\n\n  @call\n  storage_withdraw() {\n    assertOneYocto();\n    let ownerId = near.predecessorAccountId();\n    let amount: string = this.storageDeposits.remove(ownerId) as string || \"0\";\n    let sales = restoreOwners(this.byOwnerId.get(ownerId));\n    let len = 0;\n    if (sales != null) {\n      len = sales.len();\n    }\n    let diff = BigInt(len) * STORAGE_PER_SALE;\n    let amountLeft = BigInt(amount) - diff;\n\n    if (amountLeft > 0) {\n      const promise = near.promiseBatchCreate(ownerId);\n      near.promiseBatchActionTransfer(promise, amountLeft)\n    }\n    if (diff > 0) {\n      this.storageDeposits.set(ownerId, diff.toString());\n    }\n  }\n\n  @view\n  storage_minimum_balance(): string {\n    return STORAGE_PER_SALE.toString()\n  }\n\n  @view\n  storage_balance_of({ account_id }: { account_id: string }): string {\n    return this.storageDeposits.get(account_id) as string || \"0\";\n  }\n\n  @call\n  remove_sale({ nft_contract_id, token_id }: { nft_contract_id: string, token_id: string }) {\n    return internalRemoveSale({ contract: this, nftContractId: nft_contract_id, tokenId: token_id });\n  }\n\n  @call\n  update_price({ nft_contract_id, token_id, price }: { nft_contract_id: string, token_id: string, price: string }) {\n    return internalUpdatePrice({ contract: this, nftContractId: nft_contract_id, tokenId: token_id, price: price });\n  }\n\n  @call\n  offer({ nft_contract_id, token_id }: { nft_contract_id: string, token_id: string }) {\n    return internalOffer({ contract: this, nftContractId: nft_contract_id, tokenId: token_id });\n  }\n\n  @call\n  resolve_purchase({ buyer_id, price }: { buyer_id: string, price: string }) {\n    return internalResolvePurchase({ buyerId: buyer_id, price: price });\n  }\n\n  @view\n  get_supply_sales(): string {\n    return internalSupplySales({ contract: this });\n  }\n\n  @view\n  get_supply_by_owner_id({ account_id }: { account_id: string }): string {\n    return internalSupplyByOwnerId({ contract: this, accountId: account_id });\n  }\n\n  @view\n  get_sales_by_owner_id({ account_id, from_index, limit }: { account_id: string, from_index?: string, limit?: number }): Sale[] {\n    return internalSalesByOwnerId({ contract: this, accountId: account_id, fromIndex: from_index, limit: limit });\n  }\n\n  @view\n  get_supply_by_nft_contract_id({ nft_contract_id }: { nft_contract_id: string }): string {\n    return internalSupplyByNftContractId({ contract: this, nftContractId: nft_contract_id });\n  }\n\n  @view\n  get_sales_by_nft_contract_id({ nft_contract_id, from_index, limit }: { nft_contract_id: string, from_index?: string, limit?: number }): Sale[] {\n    return internalSalesByNftContractId({ contract: this, accountId: nft_contract_id, fromIndex: from_index, limit: limit });\n  }\n\n  @view\n  get_sale({ nft_contract_token }: { nft_contract_token: string }): Sale {\n    return internalGetSale({ contract: this, nftContractToken: nft_contract_token });\n  }\n\n  @call\n  nft_on_approve({ token_id, owner_id, approval_id, msg }: { token_id: string, owner_id: string, approval_id: number, msg: string }) {\n    return internalNftOnApprove({ contract: this, tokenId: token_id, ownerId: owner_id, approvalId: approval_id, msg: msg });\n  }\n\n}"],"names":["call","target","key","descriptor","view","NearBindgen","_init","args","deserializeArgs","ret","init","serialize","_get","Object","create","prototype","U64_MAX","EVICTED_REGISTER","log","params","env","map","x","undefined","JSON","stringify","join","signerAccountId","signer_account_id","read_register","predecessorAccountId","predecessor_account_id","attachedDeposit","attached_deposit","panic","msg","storageRead","storage_read","storageHasKey","storage_has_key","storageGetEvicted","currentAccountId","current_account_id","input","promiseThen","promiseIndex","accountId","methodName","amount","gas","promise_then","promiseBatchCreate","promise_batch_create","promiseBatchActionFunctionCall","promise_batch_action_function_call","promiseBatchActionTransfer","promise_batch_action_transfer","PromiseResult","promiseResult","resultIdx","status","promise_result","Successful","Failed","NotReady","promiseReturn","promiseIdx","promise_return","storageWrite","value","exist","storage_write","storageRemove","storage_remove","storageByteCost","NearContract","deserialize","rawState","near","state","parse","c","default","assign","item","constructor","Error","serializeReturn","LookupMap","keyPrefix","containsKey","storageKey","get","raw","remove","set","storageValue","extend","objects","kv","data","u8ArrayToBytes","array","e","String","fromCharCode","bytesToU8Array","bytes","Uint8Array","length","i","charCodeAt","strOrU8Array","checkStringIsBytes","str","assert","b","ERR_INDEX_OUT_OF_BOUNDS","ERR_INCONSISTENT_STATE","indexToKey","prefix","index","Uint32Array","buffer","Vector","len","isEmpty","swapRemove","pop","last","push","element","lastIndex","lastKey","replace","elements","Symbol","iterator","VectorIterator","clear","toArray","v","vector","current","next","done","UnorderedMap","keyIndexPrefix","indexKey","indexValue","keys","values","keysLen","valuesLen","keysIsEmpty","valuesIsEmpty","serializeIndex","deserializeIndex","rawIndex","getIndexRaw","indexLookup","indexRaw","nextIndex","nextIndexRaw","lastLookupKey","UnorderedMapIterator","kvs","k","unorderedMap","UnorderedSet","elementIndexPrefix","elementsPrefix","contains","lastElement","lastLookupElement","restoreOwners","collection","assertOneYocto","toString","internallyRemoveSale","contract","nftContractId","tokenId","contractAndTokenId","DELIMETER","sale","sales","byOwnerId","owner_id","byNftContractId","GAS_FOR_NFT_TRANSFER","Sale","ownerId","approvalId","saleConditions","approval_id","nft_contract_id","token_id","sale_conditions","internalRemoveSale","internalUpdatePrice","price","internalOffer","deposit","valueOf","buyerId","BigInt","processPurchase","promise","receiver_id","memo","balance","max_len_payout","buyer_id","internalResolvePurchase","result","payout","payoutOption","remainder","entries","forEach","internalSupplySales","internalSupplyByOwnerId","internalSalesByOwnerId","fromIndex","limit","tokenSet","start","parseInt","max","internalSupplyByNftContractId","internalSalesByNftContractId","internalGetSale","nftContractToken","internalNftOnApprove","contractId","signerId","storageAmount","storage_minimum_balance","ownerPaidStorage","storageDeposits","signerStorageRequired","hasOwnProperty","NFT_METADATA_SPEC","NFT_STANDARD_NAME","STORAGE_PER_SALE","Contract","storage_deposit","account_id","storageAccountId","newBalance","storage_withdraw","diff","amountLeft","storage_balance_of","remove_sale","update_price","offer","resolve_purchase","get_supply_sales","get_supply_by_owner_id","get_sales_by_owner_id","from_index","get_supply_by_nft_contract_id","get_sales_by_nft_contract_id","get_sale","nft_contract_token","nft_on_approve"],"mappings":"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"}