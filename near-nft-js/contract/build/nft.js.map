{"version":3,"file":"nft.js","sources":["../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-contract.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/collections/unordered-set.js","../src/metadata.ts","../src/internal.ts","../src/mint.ts","../src/nft_core.ts","../src/enumeration.ts","../src/approval.ts","../src/index.ts"],"sourcesContent":["export function call(target, key, descriptor) {\n}\nexport function view(target, key, descriptor) {\n}\nexport function NearBindgen(target) {\n    return class extends target {\n        static _init() {\n            // @ts-ignore\n            let args = target.deserializeArgs();\n            let ret = new target(args);\n            // @ts-ignore\n            ret.init();\n            // @ts-ignore\n            ret.serialize();\n            return ret;\n        }\n        static _get() {\n            let ret = Object.create(target.prototype);\n            return ret;\n        }\n    };\n}\n","const U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\nexport function log(...params) {\n    env.log(`${params\n        .map(x => x === undefined ? 'undefined' : x) // Stringify undefined\n        .map(x => typeof (x) === 'object' ? JSON.stringify(x) : x) // Convert Objects to strings\n        .join(' ')}` // Convert to string\n    );\n}\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\nexport function blockIndex() {\n    return env.block_index();\n}\nexport function blockHeight() {\n    return blockIndex();\n}\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\nexport function epochHeight() {\n    return env.epoch_height();\n}\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\nexport function usedGas() {\n    return env.used_gas();\n}\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    let ret = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (ret === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\nexport function panic(msg) {\n    if (msg !== undefined) {\n        env.panic(msg);\n    }\n    else {\n        env.panic();\n    }\n}\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function storageRead(key) {\n    let ret = env.storage_read(key, 0);\n    if (ret === 1n) {\n        return env.read_register(0);\n    }\n    else {\n        return null;\n    }\n}\nexport function storageHasKey(key) {\n    let ret = env.storage_has_key(key);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    let ret = env.alt_bn128_pairing_check(value);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function jsvmAccountId() {\n    env.jsvm_account_id(0);\n    return env.read_register(0);\n}\nexport function jsvmJsContractName() {\n    env.jsvm_js_contract_name(0);\n    return env.read_register(0);\n}\nexport function jsvmMethodName() {\n    env.jsvm_method_name(0);\n    return env.read_register(0);\n}\nexport function jsvmArgs() {\n    env.jsvm_args(0);\n    return env.read_register(0);\n}\nexport function jsvmStorageWrite(key, value) {\n    let exist = env.jsvm_storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmStorageRead(key) {\n    let exist = env.jsvm_storage_read(key, 0);\n    if (exist === 1n) {\n        return env.read_register(0);\n    }\n    return null;\n}\nexport function jsvmStorageRemove(key) {\n    let exist = env.jsvm_storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmStorageHasKey(key) {\n    let exist = env.jsvm_storage_has_key(key);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmCallRaw(contractName, method, args) {\n    env.jsvm_call(contractName, method, JSON.stringify(args), 0);\n    return env.read_register(0);\n}\nexport function jsvmCall(contractName, method, args) {\n    let ret = jsvmCallRaw(contractName, method, args);\n    if (ret === null) {\n        return ret;\n    }\n    return JSON.parse(ret);\n}\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\nexport function jsvmValueReturn(value) {\n    env.jsvm_value_return(value);\n}\n// Standalone only APIs\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\nexport function storageUsage() {\n    return env.storage_usage();\n}\nexport function accountBalance() {\n    return env.account_balance();\n}\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\nexport function valueReturn(value) {\n    env.value_return(value);\n}\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\nexport function promiseAnd(...promiseIndex) {\n    return env.promise_and(...promiseIndex);\n}\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\nexport function promiseResult(resultIdx) {\n    let status = env.promise_result(resultIdx, 0);\n    if (status == PromiseResult.Successful) {\n        return env.read_register(0);\n    }\n    else if (status == PromiseResult.Failed ||\n        status == PromiseResult.NotReady) {\n        return status;\n    }\n    else {\n        panic(`Unexpected return code: ${status}`);\n    }\n}\nexport function promiseReturn(promiseIdx) {\n    env.promise_return(promiseIdx);\n}\nexport function storageWrite(key, value) {\n    let exist = env.storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageRemove(key) {\n    let exist = env.storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n","import * as near from \"./api\";\nexport class NearContract {\n    deserialize() {\n        const rawState = near.storageRead(\"STATE\");\n        if (rawState) {\n            const state = JSON.parse(rawState);\n            // reconstruction of the contract class object from plain object\n            let c = this.default();\n            Object.assign(this, state);\n            for (const item in c) {\n                if (c[item].constructor?.deserialize !== undefined) {\n                    this[item] = c[item].constructor.deserialize(this[item]);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Contract state is empty\");\n        }\n    }\n    serialize() {\n        near.storageWrite(\"STATE\", JSON.stringify(this));\n    }\n    static deserializeArgs() {\n        let args = near.input();\n        return JSON.parse(args || \"{}\");\n    }\n    static serializeReturn(ret) {\n        return JSON.stringify(ret);\n    }\n    init() { }\n}\n","import * as near from '../api';\nexport class LookupMap {\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    containsKey(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        return near.storageHasKey(storageKey);\n    }\n    get(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let raw = near.storageRead(storageKey);\n        if (raw !== null) {\n            return JSON.parse(raw);\n        }\n        return null;\n    }\n    remove(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        if (near.storageRemove(storageKey)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    set(key, value) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let storageValue = JSON.stringify(value);\n        if (near.storageWrite(storageKey, storageValue)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    extend(objects) {\n        for (let kv of objects) {\n            this.set(kv[0], kv[1]);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","export function u8ArrayToBytes(array) {\n    let ret = \"\";\n    for (let e of array) {\n        ret += String.fromCharCode(e);\n    }\n    return ret;\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    let ret = new Uint8Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        ret[i] = bytes.charCodeAt(i);\n    }\n    return ret;\n}\nexport function bytes(strOrU8Array) {\n    if (typeof strOrU8Array == \"string\") {\n        return checkStringIsBytes(strOrU8Array);\n    }\n    else if (strOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(strOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(str) {\n    for (let i = 0; i < str.length; i++) {\n        if (str.charCodeAt(i) > 255) {\n            throw new Error(`string ${str} at index ${i}: ${str[i]} is not a valid byte`);\n        }\n    }\n    return str;\n}\nexport function assert(b, str) {\n    if (b) {\n        return;\n    }\n    else {\n        throw Error(\"assertion failed: \" + str);\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes } from \"../utils\";\nconst ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nfunction indexToKey(prefix, index) {\n    let data = new Uint32Array([index]);\n    let array = new Uint8Array(data.buffer);\n    let key = u8ArrayToBytes(array);\n    return prefix + key;\n}\n/// An iterable implementation of vector that stores its content on the trie.\n/// Uses the following map: index -> element\nexport class Vector {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n    }\n    len() {\n        return this.length;\n    }\n    isEmpty() {\n        return this.length == 0;\n    }\n    get(index) {\n        if (index >= this.length) {\n            return null;\n        }\n        let storageKey = indexToKey(this.prefix, index);\n        return JSON.parse(near.storageRead(storageKey));\n    }\n    /// Removes an element from the vector and returns it in serialized form.\n    /// The removed element is replaced by the last element of the vector.\n    /// Does not preserve ordering, but is `O(1)`.\n    swapRemove(index) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else if (index + 1 == this.length) {\n            return this.pop();\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            let last = this.pop();\n            if (near.storageWrite(key, JSON.stringify(last))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    push(element) {\n        let key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWrite(key, JSON.stringify(element));\n    }\n    pop() {\n        if (this.isEmpty()) {\n            return null;\n        }\n        else {\n            let lastIndex = this.length - 1;\n            let lastKey = indexToKey(this.prefix, lastIndex);\n            this.length -= 1;\n            if (near.storageRemove(lastKey)) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    replace(index, element) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            if (near.storageWrite(key, JSON.stringify(element))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    clear() {\n        for (let i = 0; i < this.length; i++) {\n            let key = indexToKey(this.prefix, i);\n            near.storageRemove(key);\n        }\n        this.length = 0;\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let vector = new Vector(data.prefix);\n        vector.length = data.length;\n        return vector;\n    }\n}\nexport class VectorIterator {\n    constructor(vector) {\n        this.current = 0;\n        this.vector = vector;\n    }\n    next() {\n        if (this.current < this.vector.len()) {\n            let value = this.vector.get(this.current);\n            this.current += 1;\n            return { value, done: false };\n        }\n        return { value: null, done: true };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedMap {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n        this.keyIndexPrefix = prefix + \"i\";\n        let indexKey = prefix + \"k\";\n        let indexValue = prefix + \"v\";\n        this.keys = new Vector(indexKey);\n        this.values = new Vector(indexValue);\n    }\n    len() {\n        let keysLen = this.keys.len();\n        let valuesLen = this.values.len();\n        if (keysLen != valuesLen) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return keysLen;\n    }\n    isEmpty() {\n        let keysIsEmpty = this.keys.isEmpty();\n        let valuesIsEmpty = this.values.isEmpty();\n        if (keysIsEmpty != valuesIsEmpty) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return keysIsEmpty;\n    }\n    serializeIndex(index) {\n        let data = new Uint32Array([index]);\n        let array = new Uint8Array(data.buffer);\n        return u8ArrayToBytes(array);\n    }\n    deserializeIndex(rawIndex) {\n        let array = bytesToU8Array(rawIndex);\n        let data = new Uint32Array(array.buffer);\n        return data[0];\n    }\n    getIndexRaw(key) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        return indexRaw;\n    }\n    get(key) {\n        let indexRaw = this.getIndexRaw(key);\n        if (indexRaw) {\n            let index = this.deserializeIndex(indexRaw);\n            let value = this.values.get(index);\n            if (value) {\n                return value;\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n        return null;\n    }\n    set(key, value) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            let index = this.deserializeIndex(indexRaw);\n            return this.values.replace(index, value);\n        }\n        else {\n            let nextIndex = this.len();\n            let nextIndexRaw = this.serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.keys.push(key);\n            this.values.push(value);\n            return null;\n        }\n    }\n    remove(key) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.len() == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastKey = this.keys.get(this.len() - 1);\n                if (!lastKey) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastKey != key) {\n                    let lastLookupKey = this.keyIndexPrefix + JSON.stringify(lastKey);\n                    near.storageWrite(lastLookupKey, indexRaw);\n                }\n            }\n            let index = this.deserializeIndex(indexRaw);\n            this.keys.swapRemove(index);\n            return this.values.swapRemove(index);\n        }\n        return null;\n    }\n    clear() {\n        for (let key of this.keys) {\n            let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n            near.storageRemove(indexLookup);\n        }\n        this.keys.clear();\n        this.values.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    extend(kvs) {\n        for (let [k, v] of kvs) {\n            this.set(k, v);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let map = new UnorderedMap(data.prefix);\n        // reconstruct UnorderedMap\n        map.length = data.length;\n        // reconstruct keys Vector\n        map.keys = new Vector(data.prefix + \"k\");\n        map.keys.length = data.keys.length;\n        // reconstruct values Vector\n        map.values = new Vector(data.prefix + \"v\");\n        map.values.length = data.values.length;\n        return map;\n    }\n}\nclass UnorderedMapIterator {\n    constructor(unorderedMap) {\n        this.keys = new VectorIterator(unorderedMap.keys);\n        this.values = new VectorIterator(unorderedMap.values);\n    }\n    next() {\n        let key = this.keys.next();\n        let value = this.values.next();\n        if (key.done != value.done) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return { value: [key.value, value.value], done: key.done };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedSet {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n        this.elementIndexPrefix = prefix + \"i\";\n        let elementsPrefix = prefix + \"e\";\n        this.elements = new Vector(elementsPrefix);\n    }\n    len() {\n        return this.elements.len();\n    }\n    isEmpty() {\n        return this.elements.isEmpty();\n    }\n    serializeIndex(index) {\n        let data = new Uint32Array([index]);\n        let array = new Uint8Array(data.buffer);\n        return u8ArrayToBytes(array);\n    }\n    deserializeIndex(rawIndex) {\n        let array = bytesToU8Array(rawIndex);\n        let data = new Uint32Array(array.buffer);\n        return data[0];\n    }\n    contains(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        return near.storageHasKey(indexLookup);\n    }\n    set(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        if (near.storageRead(indexLookup)) {\n            return false;\n        }\n        else {\n            let nextIndex = this.len();\n            let nextIndexRaw = this.serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.elements.push(element);\n            return true;\n        }\n    }\n    remove(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.len() == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastElement = this.elements.get(this.len() - 1);\n                if (!lastElement) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastElement != element) {\n                    let lastLookupElement = this.elementIndexPrefix + JSON.stringify(lastElement);\n                    near.storageWrite(lastLookupElement, indexRaw);\n                }\n            }\n            let index = this.deserializeIndex(indexRaw);\n            this.elements.swapRemove(index);\n            return true;\n        }\n        return false;\n    }\n    clear() {\n        for (let element of this.elements) {\n            let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n            near.storageRemove(indexLookup);\n        }\n        this.elements.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return this.elements[Symbol.iterator]();\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.set(element);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let set = new UnorderedSet(data.prefix);\n        // reconstruct UnorderedSet\n        set.length = data.length;\n        // reconstruct Vector\n        let elementsPrefix = data.prefix + \"e\";\n        set.elements = new Vector(elementsPrefix);\n        set.elements.length = data.elements.length;\n        return set;\n    }\n}\n","import { Contract } from \".\";\n\nexport class Payout {\n    payout: { [accountId: string]: bigint };\n    constructor({ payout }: { payout: { [accountId: string]: bigint } }) {\n        this.payout = payout;\n    }\n}\n\nexport class TokenMetadata {\n    title?: string;\n    description?: string;\n    media?: string;\n\n    constructor(\n        {\n            title,\n            description,\n            media,\n\n        }: {\n            title?: string,\n            description?: string,\n            media?: string,\n\n        }\n    ) {\n        this.title = title\n        this.description = description\n        this.media = media\n    }\n}\n\nexport class Token {\n    owner_id: string;\n    approved_account_ids: { [accountId: string]: number };\n    next_approval_id: number;\n\n    constructor({\n        ownerId,\n        approvedAccountIds,\n        nextApprovalId,\n    }: {\n        ownerId: string,\n        approvedAccountIds: { [accountId: string]: number },\n        nextApprovalId: number,\n    }) {\n        this.owner_id = ownerId;\n        this.approved_account_ids = approvedAccountIds;\n        this.next_approval_id = nextApprovalId\n    }\n}\n\nexport class JsonToken {\n    token_id: string;\n    owner_id: string;\n    metadata: TokenMetadata;\n    approved_account_ids: { [accountId: string]: number };\n\n    constructor({\n        tokenId,\n        ownerId,\n        metadata,\n        approvedAccountIds,\n    }: {\n        tokenId: string,\n        ownerId: string,\n        metadata: TokenMetadata,\n        approvedAccountIds: { [accountId: string]: number }\n    }) {\n        this.token_id = tokenId\n        this.owner_id = ownerId\n        this.metadata = metadata\n        this.approved_account_ids = approvedAccountIds\n    }\n}","import { assert, near, UnorderedSet, Vector } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { Token } from \"./metadata\";\n\nexport function restoreOwners(collection) {\n    if (collection == null) {\n        return null;\n    }\n    return UnorderedSet.deserialize(collection as UnorderedSet);\n}\n\nexport function refundApprovedAccountIdsIter(accountId: string, approvedAccountIds: string[]) {\n    let storageReleased = approvedAccountIds.map(e => bytesForApprovedAccountId(e)).reduce((partialSum, a) => partialSum + a, 0);\n    let amountToTransfer = BigInt(storageReleased) * near.storageByteCost().valueOf();\n    const promise = near.promiseBatchCreate(accountId);\n    near.promiseBatchActionTransfer(promise, amountToTransfer)\n}\n\nexport function refundApprovedAccountIds(accountId: string, approvedAccountIds: { [key: string]: number }) {\n    refundApprovedAccountIdsIter(accountId, Object.keys(approvedAccountIds));\n}\n\nexport function internalAddTokenToOwner(contract: Contract, accountId: string, tokenId: string) {\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n\n    if (tokenSet == null) {\n        tokenSet = new UnorderedSet(\"tokensPerOwner\" + accountId.toString());\n    }\n\n    tokenSet.set(tokenId);\n    contract.tokensPerOwner.set(accountId, tokenSet);\n}\n\nexport function internalRemoveTokenFromOwner(contract: Contract, accountId: string, tokenId: string) {\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n    if (tokenSet == null) {\n        near.panic(\"Token should be owned by the sender\");\n    }\n    tokenSet.remove(tokenId)\n\n    if (tokenSet.isEmpty()) {\n        contract.tokensPerOwner.remove(accountId);\n    } else {\n        contract.tokensPerOwner.set(accountId, tokenSet);\n    }\n}\n\nexport function refundDeposit(storageUsed: bigint) {\n    let requiredCost = storageUsed * near.storageByteCost().valueOf()\n    let attachedDeposit = near.attachedDeposit().valueOf();\n\n    assert(\n        requiredCost <= attachedDeposit,\n        `Must attach ${requiredCost} yoctoNEAR to cover storage`\n    )\n\n    let refund = attachedDeposit - requiredCost;\n    near.log(`Refunding ${refund} yoctoNEAR`);\n\n    if (refund > 1) {\n        const promise = near.promiseBatchCreate(near.predecessorAccountId());\n        near.promiseBatchActionTransfer(promise, refund)\n    }\n}\n\nexport function bytesForApprovedAccountId(accountId: string): number {\n    return accountId.length + 4 + 8;\n}\n\nexport function assertAtLeastOneYocto() {\n    assert(near.attachedDeposit().valueOf() >= BigInt(1), \"Requires attached deposit of at least 1 yoctoNEAR\");\n}\n\nexport function assertOneYocto() {\n    assert(near.attachedDeposit().toString() === \"1\", \"Requires attached deposit of exactly 1 yoctoNEAR\");\n}\n\nexport function internalTransfer(contract: Contract, senderId: string, receiverId: string, tokenId: string, approvalId: number, memo: string): Token {\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token found\");\n    }\n\n    if (senderId != token.owner_id) {\n        if (!token.approved_account_ids.hasOwnProperty(senderId)) {\n            near.panic(\"Unauthorized\");\n        }\n\n        if (approvalId != null) {\n            let actualApprovalId = token.approved_account_ids[senderId];\n            if (actualApprovalId == null) {\n                near.panic(\"Sender is not approved account\");\n            }\n\n            assert(actualApprovalId == approvalId, `The actual approval_id ${actualApprovalId} is different from the given approval_id ${approvalId}`);\n        }\n    }\n\n    assert(token.owner_id != receiverId, \"The token owner and the receiver should be different\")\n\n    internalRemoveTokenFromOwner(contract, token.owner_id, tokenId);\n    internalAddTokenToOwner(contract, receiverId, tokenId);\n\n    let newToken = new Token({\n        ownerId: receiverId,\n        approvedAccountIds: {},\n        nextApprovalId: token.next_approval_id,\n    });\n\n    contract.tokensById.set(tokenId, newToken);\n\n    if (memo != null) {\n        near.log(`Memo: ${memo}`);\n    }\n\n    let authorizedId;\n\n    if (approvalId != null) {\n        authorizedId = senderId\n    }\n\n    let nftTransferLog = {\n        standard: NFT_STANDARD_NAME,\n        version: NFT_METADATA_SPEC,\n        event: \"nft_transfer\",\n        data: [\n            {\n                authorized_id: authorizedId,\n                old_owner_id: token.owner_id,\n                new_owner_id: receiverId,\n                token_ids: [tokenId],\n                memo,\n            }\n        ]\n    }\n\n    near.log(JSON.stringify(nftTransferLog));\n    return token\n}","import { Contract } from \".\"\nimport { Token, TokenMetadata } from \"./metadata\"\nimport { assert, near } from \"near-sdk-js\"\nimport { internalAddTokenToOwner, refundDeposit } from \"./internal\";\n\nexport function internalMint({\n    contract,\n    tokenId,\n    metadata,\n    receiverId,\n}: {\n    contract: Contract,\n    tokenId: string,\n    metadata: TokenMetadata,\n    receiverId: string,\n}): void {\n    let initialStorage = near.storageUsage();\n\n    let token = new Token({\n        ownerId: receiverId,\n        approvedAccountIds: {},\n        nextApprovalId: 0\n    })\n\n    assert(!contract.tokensById.containsKey(tokenId), \"Token already exists, try with a unique key\")\n\n    contract.tokensById.set(tokenId, token);\n    contract.tokenMetadataById.set(tokenId, metadata);\n\n    internalAddTokenToOwner(contract, token.owner_id, tokenId)\n\n    let reqStorage = near.storageUsage().valueOf() - initialStorage.valueOf();\n\n    refundDeposit(reqStorage);\n}","// @ts-nocheck\nimport { assert, bytes, near } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { assertOneYocto, internalAddTokenToOwner, internalRemoveTokenFromOwner, internalTransfer, refundDeposit, refundApprovedAccountIds } from \"./internal\";\nimport { JsonToken, Token, TokenMetadata } from \"./metadata\";\n\nconst GAS_FOR_RESOLVE_TRANSFER = 40_000_000_000_000;\nconst GAS_FOR_NFT_ON_TRANSFER = 35_000_000_000_000;\n\nexport function internalNftToken({\n    contract,\n    tokenId\n}: {\n    contract: Contract,\n    tokenId: string\n}) {\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        return null;\n    }\n\n    let metadata = contract.tokenMetadataById.get(tokenId) as TokenMetadata;\n\n    let jsonToken = new JsonToken({\n        tokenId: tokenId,\n        ownerId: token.owner_id,\n        metadata,\n        approvedAccountIds: token.approved_account_ids,\n    });\n    return jsonToken;\n}\n\nexport function internalNftTransfer({\n    contract,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo,\n}: {\n    contract: Contract,\n    receiverId: string,\n    tokenId: string,\n    approvalId: number\n    memo: string\n}) {\n    assertOneYocto();\n    let senderId = near.predecessorAccountId();\n\n    let previousToken = internalTransfer(\n        contract,\n        senderId,\n        receiverId,\n        tokenId,\n        approvalId,\n        memo,\n    );\n\n    refundApprovedAccountIds(\n        previousToken.owner_id,\n        previousToken.approved_account_ids\n    );\n}\n\nexport function internalNftTransferCall({\n    contract,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo,\n    msg\n}: {\n    contract: Contract,\n    receiverId: string,\n    tokenId: string,\n    approvalId: number,\n    memo: string,\n    msg: string\n}) {\n    assertOneYocto();\n    let senderId = near.predecessorAccountId();\n\n    let previousToken = internalTransfer(\n        contract,\n        senderId,\n        receiverId,\n        tokenId,\n        approvalId,\n        memo,\n    );\n\n    const promise = near.promiseBatchCreate(receiverId);\n    near.promiseBatchActionFunctionCall(\n        promise,\n        \"nft_on_transfer\",\n        bytes(JSON.stringify({\n            sender_id: senderId,\n            previous_owner_id: previousToken.owner_id,\n            token_id: tokenId,\n            msg\n        })),\n        0,\n        GAS_FOR_NFT_ON_TRANSFER\n    );\n\n    near.promiseThen(\n        promise,\n        near.currentAccountId(),\n        \"nft_resolve_transfer\",\n        bytes(JSON.stringify({\n            owner_id: previousToken.owner_id,\n            receiver_id: receiverId,\n            token_id: tokenId,\n            approved_account_ids: previousToken.approved_account_ids\n        })),\n        0,\n        GAS_FOR_RESOLVE_TRANSFER\n    );\n    return near.promiseReturn(promise);\n}\n\nexport function internalResolveTransfer({\n    contract,\n    authorizedId,\n    ownerId,\n    receiverId,\n    tokenId,\n    approvedAccountIds,\n    memo\n}: {\n    contract: Contract,\n    authorizedId: string,\n    ownerId: string,\n    receiverId: string,\n    tokenId: string,\n    approvedAccountIds: { [key: string]: number },\n    memo: string\n}) {\n    assert(near.currentAccountId() === near.predecessorAccountId(), \"Only the contract itself can call this method\");\n    let result = near.promiseResult(0);\n    if (typeof result === 'string') {\n        if (result === 'false') {\n            refundApprovedAccountIds(ownerId, approvedAccountIds);\n            return true;\n        }\n    }\n\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token != null) {\n        if (token.owner_id != receiverId) {\n            refundApprovedAccountIds(ownerId, approvedAccountIds);\n            return true;\n        }\n    } else {\n        refundApprovedAccountIds(ownerId, approvedAccountIds);\n        return true;\n    }\n\n    internalRemoveTokenFromOwner(contract, receiverId, tokenId);\n    internalAddTokenToOwner(contract, ownerId, tokenId);\n\n    token.owner_id = ownerId\n\n    refundApprovedAccountIds(receiverId, token.approved_account_ids);\n    token.approved_account_ids = approvedAccountIds;\n\n    contract.tokensById.set(tokenId, token);\n\n\n    let nftTransferLog = {\n        standard: NFT_STANDARD_NAME,\n        version: NFT_METADATA_SPEC,\n        event: \"nft_transfer\",\n        data: [\n            {\n                authorized_id: authorizedId,\n                old_owner_id: receiverId,\n                new_owner_id: ownerId,\n                token_ids: [tokenId],\n                memo,\n            }\n        ]\n    }\n\n    near.log(JSON.stringify(nftTransferLog));\n    return false\n}","import { near, UnorderedSet } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { restoreOwners } from \"./internal\";\nimport { JsonToken } from \"./metadata\";\nimport { internalNftToken } from \"./nft_core\";\n\nexport function internalTotalSupply({\n    contract\n}: {\n    contract: Contract\n}): number {\n    return contract.tokenMetadataById.len();\n}\n\nexport function internalNftTokens({\n    contract,\n    fromIndex,\n    limit\n}: {\n    contract: Contract,\n    fromIndex?: string,\n    limit?: number\n}): JsonToken[] {\n    let tokens = [];\n\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    let max = limit ? limit : 50;\n\n    let keys = contract.tokenMetadataById.toArray();\n    for (let i = start; i < keys.length && i < start + max; i++) {\n        let jsonToken = internalNftToken({ contract, tokenId: keys[i][0] });\n        tokens.push(jsonToken);\n    }\n    return tokens;\n}\n\nexport function internalSupplyForOwner({\n    contract,\n    accountId\n}: {\n    contract: Contract,\n    accountId: string\n}): number {\n    let tokens = restoreOwners(contract.tokensPerOwner.get(accountId));\n    if (tokens == null) {\n        return 0\n    }\n    return tokens.len();\n}\n\nexport function internalTokensForOwner({\n    contract,\n    accountId,\n    fromIndex,\n    limit\n}: {\n    contract: Contract,\n    accountId: string,\n    fromIndex?: string,\n    limit?: number\n}): JsonToken[] {\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n\n    if (tokenSet == null) {\n        return [];\n    }\n\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    let max = limit ? limit : 50;\n\n    let keys = tokenSet.toArray();\n    let tokens: JsonToken[] = []\n    for (let i = start; i < max; i++) {\n        if (i >= keys.length) {\n            break;\n        }\n        let token = internalNftToken({ contract, tokenId: keys[i] });\n        tokens.push(token);\n    }\n    return tokens;\n}","import { assert, bytes, near } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { assertAtLeastOneYocto, assertOneYocto, bytesForApprovedAccountId, internalAddTokenToOwner, refundDeposit, refundApprovedAccountIds, refundApprovedAccountIdsIter } from \"./internal\";\nimport { Token } from \"./metadata\";\n\nconst GAS_FOR_NFT_ON_APPROVE = 35_000_000_000_000;\n\nexport function internalNftApprove({\n    contract,\n    tokenId,\n    accountId,\n    msg\n}: {\n    contract: Contract,\n    tokenId: string,\n    accountId: string,\n    msg: string\n}) {\n    assertAtLeastOneYocto();\n\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n    assert(near.predecessorAccountId() === token.owner_id, \"Predecessor must be the token owner\");\n\n    let approvalId = token.next_approval_id;\n\n    let isNewApproval = token.approved_account_ids.hasOwnProperty(accountId);\n    token.approved_account_ids[accountId] = approvalId;\n\n    let storageUsed = isNewApproval ? bytesForApprovedAccountId(accountId) : 0;\n\n    token.next_approval_id += 1;\n    contract.tokensById.set(tokenId, token);\n\n    refundDeposit(BigInt(storageUsed));\n\n    if (msg != null) {\n        const promise = near.promiseBatchCreate(accountId);\n        near.promiseBatchActionFunctionCall(\n            promise,\n            \"nft_on_approve\",\n            bytes(JSON.stringify({\n                token_id: tokenId,\n                owner_id: token.owner_id,\n                approval_id: approvalId,\n                msg\n            })),\n            0,\n            GAS_FOR_NFT_ON_APPROVE\n        );\n\n        near.promiseReturn(promise);\n    }\n}\n\nexport function internalNftIsApproved({\n    contract,\n    tokenId,\n    approvedAccountId,\n    approvalId\n}: {\n    contract: Contract,\n    tokenId: string,\n    approvedAccountId: string,\n    approvalId: number\n}) {\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n\n    let approval = token.approved_account_ids[approvedAccountId];\n\n    if (approval == null) {\n        return false\n    }\n\n    if (approvalId == null) {\n        return true\n    }\n\n    return approvalId == approval;\n}\n\nexport function internalNftRevoke({\n    contract,\n    tokenId,\n    accountId\n}: {\n    contract: Contract,\n    tokenId: string,\n    accountId: string\n}) {\n    assertOneYocto();\n\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n\n    let predecessorAccountId = near.predecessorAccountId();\n    assert(predecessorAccountId == token.owner_id, \"only token owner can revoke\");\n\n    if (token.approved_account_ids.hasOwnProperty(accountId)) {\n        delete token.approved_account_ids[accountId];\n\n        refundApprovedAccountIdsIter(predecessorAccountId, [accountId]);\n\n        contract.tokensById.set(tokenId, token);\n    }\n}\n\nexport function internalNftRevokeAll({\n    contract,\n    tokenId\n}: {\n    contract: Contract,\n    tokenId: string\n}) {\n    assertOneYocto();\n\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n\n    let predecessorAccountId = near.predecessorAccountId();\n    assert(predecessorAccountId == token.owner_id, \"only token owner can revoke\");\n\n    if (token.approved_account_ids && Object.keys(token.approved_account_ids).length === 0 && Object.getPrototypeOf(token.approved_account_ids) === Object.prototype) {\n        refundApprovedAccountIds(predecessorAccountId, token.approved_account_ids);\n        token.approved_account_ids = {};\n        contract.tokensById.set(tokenId, token);\n    }\n}","import { NearContract, NearBindgen, near, call, view, LookupMap, UnorderedMap } from 'near-sdk-js';\nimport { Token, TokenMetadata } from './metadata';\nimport { internalMint } from './mint';\nimport { internalNftTransfer, internalNftTransferCall, internalResolveTransfer, internalNftToken } from './nft_core';\nimport { internalNftTokens, internalSupplyForOwner, internalTokensForOwner, internalTotalSupply } from './enumeration';\nimport { internalNftApprove, internalNftIsApproved, internalNftRevoke, internalNftRevokeAll } from './approval';\n\n\nexport const NFT_METADATA_SPEC = \"nft-1.0.0\";\nexport const NFT_STANDARD_NAME = \"nep171\";\n\n\n@NearBindgen\nexport class Contract extends NearContract {\n  owner_id: string;\n  tokensPerOwner: LookupMap;\n  tokensById: LookupMap;\n  tokenMetadataById: UnorderedMap;\n\n\n  constructor({ owner_id }: { owner_id: string }) {\n    super()\n    this.owner_id = owner_id;\n    this.tokensPerOwner = new LookupMap(\"tokensPerOwner\");\n    this.tokensById = new LookupMap(\"tokensById\");\n    this.tokenMetadataById = new UnorderedMap(\"tokenMetadataById\");\n  }\n\n  default() {\n    return new Contract({ owner_id: near.predecessorAccountId() })\n  }\n\n  @call\n  nft_mint({ token_id, metadata, receiver_id }) {\n    return internalMint({ contract: this, tokenId: token_id, metadata: metadata, receiverId: receiver_id })\n  }\n  @view\n  nft_token({ token_id }) {\n    return internalNftToken({ contract: this, tokenId: token_id });\n  }\n\n  @call\n  nft_transfer({ receiver_id, token_id, approval_id, memo }) {\n    return internalNftTransfer({ contract: this, receiverId: receiver_id, tokenId: token_id, approvalId: approval_id, memo: memo });\n  }\n\n  @call\n  nft_transfer_call({ receiver_id, token_id, approval_id, memo, msg }) {\n    return internalNftTransferCall({ contract: this, receiverId: receiver_id, tokenId: token_id, approvalId: approval_id, memo: memo, msg: msg });\n  }\n\n  @call\n  nft_resolve_transfer({ authorized_id, owner_id, receiver_id, token_id, approved_account_ids, memo }) {\n    return internalResolveTransfer({ contract: this, authorizedId: authorized_id, ownerId: owner_id, receiverId: receiver_id, tokenId: token_id, approvedAccountIds: approved_account_ids, memo: memo });\n  }\n\n  @view\n  nft_is_approved({ token_id, approved_account_id, approval_id }) {\n    return internalNftIsApproved({ contract: this, tokenId: token_id, approvedAccountId: approved_account_id, approvalId: approval_id });\n  }\n  @call\n  nft_approve({ token_id, account_id, msg }) {\n    return internalNftApprove({ contract: this, tokenId: token_id, accountId: account_id, msg: msg });\n  }\n\n  @view\n  nft_payout() {\n    return \"Royalty not supported\";\n  }\n\n  @view\n  nft_transfer_payout() {\n    return \"Royalty not supported\";\n  }\n\n  @call\n  nft_revoke({ token_id, account_id }) {\n    return internalNftRevoke({ contract: this, tokenId: token_id, accountId: account_id });\n  }\n\n  @call\n  nft_revoke_all({ token_id }) {\n    return internalNftRevokeAll({ contract: this, tokenId: token_id });\n  }\n\n  @view\n  nft_total_supply() {\n    return internalTotalSupply({ contract: this });\n  }\n\n\n  @view\n  nft_tokens({ from_index, limit }) {\n    return internalNftTokens({ contract: this, fromIndex: from_index, limit: limit });\n  }\n\n  @view\n  nft_tokens_for_owner({ account_id, from_index, limit }) {\n    return internalTokensForOwner({ contract: this, accountId: account_id, fromIndex: from_index, limit: limit });\n  }\n\n  @view\n  nft_supply_for_owner({ account_id }) {\n    return internalSupplyForOwner({ contract: this, accountId: account_id });\n  }\n\n  @view\n  nft_metadata() {\n    return \"Ignitus networks, NEP171\"\n  }\n\n}"],"names":["call","target","key","descriptor","view","NearBindgen","_init","args","deserializeArgs","ret","init","serialize","_get","Object","create","prototype","U64_MAX","EVICTED_REGISTER","log","params","env","map","x","undefined","JSON","stringify","join","predecessorAccountId","predecessor_account_id","read_register","attachedDeposit","attached_deposit","panic","msg","storageRead","storage_read","storageHasKey","storage_has_key","storageGetEvicted","currentAccountId","current_account_id","input","storageUsage","storage_usage","promiseThen","promiseIndex","accountId","methodName","amount","gas","promise_then","promiseBatchCreate","promise_batch_create","promiseBatchActionFunctionCall","promise_batch_action_function_call","promiseBatchActionTransfer","promise_batch_action_transfer","PromiseResult","promiseResult","resultIdx","status","promise_result","Successful","Failed","NotReady","promiseReturn","promiseIdx","promise_return","storageWrite","value","exist","storage_write","storageRemove","storage_remove","storageByteCost","NearContract","deserialize","rawState","near","state","parse","c","default","assign","item","constructor","Error","serializeReturn","LookupMap","keyPrefix","containsKey","storageKey","get","raw","remove","set","storageValue","extend","objects","kv","data","u8ArrayToBytes","array","e","String","fromCharCode","bytesToU8Array","bytes","Uint8Array","length","i","charCodeAt","strOrU8Array","checkStringIsBytes","str","assert","b","ERR_INDEX_OUT_OF_BOUNDS","ERR_INCONSISTENT_STATE","indexToKey","prefix","index","Uint32Array","buffer","Vector","len","isEmpty","swapRemove","pop","last","push","element","lastIndex","lastKey","replace","elements","Symbol","iterator","VectorIterator","clear","toArray","v","vector","current","next","done","UnorderedMap","keyIndexPrefix","indexKey","indexValue","keys","values","keysLen","valuesLen","keysIsEmpty","valuesIsEmpty","serializeIndex","deserializeIndex","rawIndex","getIndexRaw","indexLookup","indexRaw","nextIndex","nextIndexRaw","lastLookupKey","UnorderedMapIterator","kvs","k","unorderedMap","UnorderedSet","elementIndexPrefix","elementsPrefix","contains","lastElement","lastLookupElement","Token","ownerId","approvedAccountIds","nextApprovalId","owner_id","approved_account_ids","next_approval_id","JsonToken","tokenId","metadata","token_id","restoreOwners","collection","refundApprovedAccountIdsIter","storageReleased","bytesForApprovedAccountId","reduce","partialSum","a","amountToTransfer","BigInt","valueOf","promise","refundApprovedAccountIds","internalAddTokenToOwner","contract","tokenSet","tokensPerOwner","toString","internalRemoveTokenFromOwner","refundDeposit","storageUsed","requiredCost","refund","assertAtLeastOneYocto","assertOneYocto","internalTransfer","senderId","receiverId","approvalId","memo","token","tokensById","hasOwnProperty","actualApprovalId","newToken","authorizedId","nftTransferLog","standard","NFT_STANDARD_NAME","version","NFT_METADATA_SPEC","event","authorized_id","old_owner_id","new_owner_id","token_ids","internalMint","initialStorage","tokenMetadataById","reqStorage","GAS_FOR_RESOLVE_TRANSFER","GAS_FOR_NFT_ON_TRANSFER","internalNftToken","jsonToken","internalNftTransfer","previousToken","internalNftTransferCall","sender_id","previous_owner_id","receiver_id","internalResolveTransfer","result","internalTotalSupply","internalNftTokens","fromIndex","limit","tokens","start","parseInt","max","internalSupplyForOwner","internalTokensForOwner","GAS_FOR_NFT_ON_APPROVE","internalNftApprove","isNewApproval","approval_id","internalNftIsApproved","approvedAccountId","approval","internalNftRevoke","internalNftRevokeAll","getPrototypeOf","Contract","nft_mint","nft_token","nft_transfer","nft_transfer_call","nft_resolve_transfer","nft_is_approved","approved_account_id","nft_approve","account_id","nft_payout","nft_transfer_payout","nft_revoke","nft_revoke_all","nft_total_supply","nft_tokens","from_index","nft_tokens_for_owner","nft_supply_for_owner","nft_metadata"],"mappings":"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"}